CC	  = @CC@
LD	  = @LD@
XCFLAGS   =
ARCHFLAGS = @archflags@
CFLAGS    =-g -O2 @CFLAGS@ -I./include $(XCFLAGS) $(ARCHFLAGS)
XLDFLAGS  =
LDFLAGS   = @LDFLAGS@ $(EFENCE)
LIBS      = @LIBS@ $(EFENCE) -lm
U8VERSION = @U8VERSION@
BUILDMODE:= `cat buildmode`

DESTDIR		=
prefix		= @prefix@
exec_prefix	= @exec_prefix@
datarootdir	= @datarootdir@
datadir		= @datadir@
LOCALEDIR	= $(DESTDIR)@localedir@
MANDIR		= $(DESTDIR)@mandir@
LIBINSTALLDIR	= $(DESTDIR)@libdir@
ENCDIR		= $(DESTDIR)@prefix@/share/libu8/encodings
XRPMFLAGS	=
RPMFLAGS	= $(XRPMFLAGS) @RPMFLAGS@
RPMDIR		= @RPMDIR@
GPGID           = @GPGID@
CLEAN		= @CLEAN@
INSTALL		= @SUDO@@INSTALL@
RANLIB		= @RANLIB@
MKSTATIC	= @MKSTATIC@
DOXYGEN		= @doxygen@
MKSO		= $(CC) $(CFLAGS) $(XCFLAGS) -shared $(LDFLAGS) $(XLDFLAGS) $(LIBS)
#MACLIBTOOL	= libtool -dynamic -single_module $(LDFLAGS) $(LIBS)
MACLIBTOOL	= $(CC) -dynamiclib -single_module $(LDFLAGS) $(LIBS)
RPMGPG		= %__gpg gpg --force-v3-sigs --digest-algo=sha1 -u \"%{_gpg_name}\" --no-armor --no-secmem-warning -sbo %{__signature_filename} %{__plaintext_filename}

COMPONENT=main
CODENAME=beingmeta

LIBU8_HEADERS=\
	include/libu8/config.h include/libu8/u8source.h include/libu8/threading.h \
	include/libu8/libu8.h include/libu8/u8contour.h \
	include/libu8/u8streamio.h include/libu8/u8stringfns.h \
	include/libu8/u8ctype.h include/libu8/u8convert.h \
	include/libu8/u8crypto.h include/libu8/u8logging.h \
	include/libu8/cityhash.h
LIBU8_SOURCES=\
  libu8.c streamio.c printf.c logging.c exceptions.c  ctype.c stringfns.c \
  libu8fns.c timefns.c netfns.c srvfns.c rusage.c contour.c cityhash.c \
  digestfns.c cryptofns.c pathfns.c filefns.c fileio.c \
  libu8io.c xfiles.c convert.c filestring.c bytebuf.c \
  tests/latin1u8.c tests/xtimetest.c tests/u8recode.c tests/u8xrecode.c tests/echosrv.c
COMMON_HEADERS= $(LIBU8_HEADERS)

LIBU8CORE_OBJECTS=libu8.o streamio.o printf.o  contour.o logging.o \
                  ctype.o exceptions.o stringfns.o bytebuf.o cityhash.o
LIBU8FNS_OBJECTS=libu8fns.o netfns.o srvfns.o \
		 pathfns.o filefns.o fileio.o \
		 rusage.o timefns.o digestfns.o \
		 cryptofns.o
LIBU8IO_OBJECTS=libu8io.o xfiles.o convert.o filestring.o
LIBU8DATA_OBJECTS=chardata.o
LIBU8STDIO_OBJECTS=u8stdio.o
LIBU8SYSLOG_OBJECTS=u8syslog.o
LIBU8_OBJECTS=$(LIBU8CORE_OBJECTS) $(LIBU8FNS_OBJECTS) $(LIBU8SYSLOG_OBJECTS)
TESTBIN=tests/u8recode tests/latin1u8 tests/u8xrecode tests/getentity \
	tests/echosrv tests/xtimetest
DYTESTBIN=tests/dynamic/u8recode tests/dynamic/latin1u8 \
	tests/dynamic/u8xrecode tests/dynamic/getentity \
	tests/dynamic/echosrv tests/xtimetest

STATIC_LIBS=lib/libu8.a lib/libu8core.a lib/libu8io.a lib/libu8fns.a \
            lib/libu8data.a lib/libu8stdio.a

ALL=@TAGS@ libs @I18N@ tests @DOCS@

update: buildmode
	@make `cat buildmode`
normal:
	@echo Building NORMAL configuration
	@make ${ALL}
debugging:
	@echo Building DEBUGGING configuration
	make XCFLAGS="@debugcflags@ $(XCFLAGS)" ${ALL}
optimizing:
	@echo Building OPTIMIZING configuration
	make XCFLAGS="-O3" ${ALL}
nitpicking:
	@echo Building NITPICKING configuration
	make XCFLAGS="-Wall" ${ALL}
all: ${ALL}

debug:
	@if test $(BUILDMODE) != "debugging"; then echo debugging > buildmode; fi
	@make `cat buildmode`
standard:
	@if test $(BUILDMODE) != "normal"; then echo normal > buildmode; fi
	@make `cat buildmode`
nitpick:
	@if test $(BUILDMODE) != "nitpicking"; then echo nitpicking > buildmode; fi
	@make `cat buildmode`
fast:
	@if test $(BUILDMODE) != "optimizing"; then echo optimizing > buildmode; fi
	@make `cat buildmode`

buildmode:
	@if test -f buildmode; then       \
	    touch buildmode;              \
	 else echo normal > buildmode;  \
	 fi
showbuildmode showmode showbuild: buildmode
	@cat buildmode

# configure/autoconf stuff

makefile: makefile.in config.status
	./config.status
./config.status: configure
	./config.status --recheck
configure: configure.ac
	@if test -f .autoautoconf; then \
	     echo "REBUILDING configure"; autoconf; \
	else echo "WARNING: configure may be out of date"; fi
include/libu8/config.h: include/libu8/config.h.in config.status
	./config.status
include/libu8/u8source.h: include/libu8/u8source.h.in config.status
	./config.status

# Fileinfo gets version-related information about a file to pass in
# with -D

./fileinfo: etc/fileinfo.c
	$(CC) -o ./fileinfo etc/fileinfo.c

# Makes everything and then sudoes install.  Keeps build files non-root

suinstall:
	make all
	sudo make install
dbginstall:
	make XCFLAGS="-O0" all
	sudo make install

# Make rules

%.o: %.c ./fileinfo include/libu8/revision.h
	@$(CC) $(CFLAGS) @definefileinfo@ -o $@ -c $<
	@echo CC $@ $<
tests/%: tests/%.c lib/libu8io.a lib/libu8data.a lib/libu8fns.a \
         lib/libu8stdio.a lib/libu8core.a
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo CC_STATIC_EXE $@ $<
tests/dynamic/%: tests/%.c
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ -Llib -lu8 -lu8io $(LIBS)
	@echo CC_DYNAMIC_EXE $@ $<

lib/%@suffix@.a:
	@echo MKSTATIC $@
	@$(MKSTATIC) $@ $^
lib/%@suffix@.so:
	@echo MKSO $@
	@$(MKSO) -Wl,-soname=$(@F).@U8MAJOR@ -Llib -o $@ $^ -lu8 $(LIBS)
	@ln -sf $(@F) $(@D)/$(@F).@U8MAJOR@
lib/%@suffix@.dylib:
	@echo MACLIBTOOL $@
	@$(MACLIBTOOL) -install_name $(*F).@U8MAJOR@.dylib -o $@ $^
	@ln -sf $(@F) $(@D)/$(*F).@U8MAJOR@.dylib

$(LIBINSTALLDIR)/%.a: lib/%.a
	@echo Installing $@
	@unset LD_LIBRARY_PATH; $(INSTALL) -d $(LIBINSTALLDIR)
	@unset LD_LIBRARY_PATH; $(INSTALL) $< $(LIBINSTALLDIR)

$(LIBINSTALLDIR)/%@suffix@.so.@U8VERSION@: lib/%@suffix@.so
	@echo Installing $@
	@unset LD_LIBRARY_PATH; $(INSTALL) -d $(@D)
	@unset LD_LIBRARY_PATH; $(INSTALL) $< $@
$(LIBINSTALLDIR)/%@suffix@.so.@U8MAJOR@: \
	$(LIBINSTALLDIR)/%@suffix@.so.@U8VERSION@
	@echo Linking $< to $@
	@unset LD_LIBRARY_PATH; @SUDO@ln -sf $(shell basename $<) $@
$(LIBINSTALLDIR)/%@suffix@.so: $(LIBINSTALLDIR)/%@suffix@.so.@U8VERSION@
	@echo Linking to $@
	@unset LD_LIBRARY_PATH; @SUDO@ln -sf $(shell basename $<) $@

$(LIBINSTALLDIR)/%@suffix@.@U8VERSION@.dylib: lib/%@suffix@.dylib
	@echo Installing $@
	@unset LD_LIBRARY_PATH; $(INSTALL) -d $(LIBINSTALLDIR)
	@unset LD_LIBRARY_PATH; $(INSTALL) $< $@
$(LIBINSTALLDIR)/%@suffix@.@U8MAJOR@.dylib: \
	$(LIBINSTALLDIR)/%@suffix@.@U8VERSION@.dylib
	@echo Linking $< to $@
	@unset LD_LIBRARY_PATH; @SUDO@ln -sf $(shell basename $<) $@
$(LIBINSTALLDIR)/%@suffix@.dylib: $(LIBINSTALLDIR)/%@suffix@.@U8VERSION@.dylib
	@echo Linking $< to $@
	@unset LD_LIBRARY_PATH; @SUDO@ln -sf $(shell basename $<) $@

$(LIBINSTALLDIR)/%@suffix@.dylib: \
		$(LIBINSTALLDIR)/%@suffix@.@U8VERSION@.dylib
	@echo Linking to $@
	@unset LD_LIBRARY_PATH; @SUDO@ln -sf $(shell basename $<) $@

test: @test_shared@ @test_static@
test-shared: $(DYTESTBIN)
test-static: $(TESTBIN)

TAGS: tests/*.c include/libu8/*.h *.c
	etags tests/*.c include/libu8/*.h *.c

libs: @build_shared@ @build_static@
static-libs: lib/libu8.a lib/libu8core.a lib/libu8fns.a lib/libu8io.a \
	lib/libu8data.a lib/libu8stdio.a @syslog_static@
shared-libs: lib/libu8.@shared_suffix@ lib/libu8fns.@shared_suffix@ \
        lib/libu8io.@shared_suffix@ lib/libu8data.@shared_suffix@ \
        lib/libu8stdio.@shared_suffix@ @syslog_shared@

syslog-shared: lib/libu8syslog.@shared_suffix@
syslog-static: lib/libu8syslog.a

include/libu8/revision.h: $(LIBU8_SOURCES) $(LIBU8_HEADERS) makefile
	@if test -f etc/revision.h; then				\
	    cp etc/revision.h etc/use_revision.h; 			\
	elif $(GITDESCRIBE) > /dev/null 2>&1; then			\
	    echo "#define LIBU8_REVISION \""`@GITDESCRIBE@`"\"" 	\
		> etc/use_revision.h; 					\
	else echo "#define LIBU8_REVISION \"@U8VERSION@-exported\""	\
		> etc/use_revision.h; 					\
	fi
	@if test ! -f $@; then 						\
	  mv etc/use_revision.h $@; 					\
	elif diff etc/use_revision.h $@>/dev/null; then			\
	  rm etc/use_revision.h; 					\
	else 								\
	  echo "Revision changed"; 					\
	  mv $@ etc/old_revision.h; 					\
	  mv etc/use_revision.h $@; 					\
	fi
lib/libu8.a: $(LIBU8_OBJECTS)
lib/libu8@suffix@.so: $(LIBU8_OBJECTS)
lib/libu8.dylib: $(LIBU8_OBJECTS)
lib/libu8.dll: $(LIBU8_OBJECTS)
# Avoid recursive reference for the libu8 library itself
lib/libu8@suffix@.so:
	@$(MKSO) -Wl,-soname=$(@F).@U8MAJOR@ -Llib -o $@ $^ $(LIBS)
	@echo MKSO $@
lib/libu8@suffix@.so.@FDMAJOR@: lib/libu8@suffix@.so
	@ln -sf libu8@suffix@.so $@

lib/libu8core.a: $(LIBU8CORE_OBJECTS)
lib/libu8core@suffix@.so: $(LIBU8CORE_OBJECTS)
lib/libu8core.dylib: $(LIBU8CORE_OBJECTS)
lib/libu8core.dll: $(LIBU8CORE_OBJECTS)
# Avoid recursive reference
lib/libu8core@suffix@.so.@U8VERSION@:
	@$(MKSO) -Wl,-soname=$(@F) -o $@ $^
	@echo MKSO $@

lib/libu8fns.a: $(LIBU8FNS_OBJECTS)
lib/libu8fns@suffix@.so: $(LIBU8FNS_OBJECTS)
lib/libu8fns.dylib: $(LIBU8FNS_OBJECTS) lib/libu8.dylib
lib/libu8fns.dll: $(LIBU8FNS_OBJECTS) libu8.dll

lib/libu8data.a: $(LIBU8DATA_OBJECTS)
lib/libu8data@suffix@.so: $(LIBU8DATA_OBJECTS)
lib/libu8data.dylib: $(LIBU8DATA_OBJECTS) lib/libu8.dylib lib/libu8fns.dylib
lib/libu8data.dll: $(LIBU8DATA_OBJECTS) lib/libu8.dll lib/libu8fns.dll

lib/libu8io.a: $(LIBU8IO_OBJECTS)
lib/libu8io@suffix@.so: $(LIBU8IO_OBJECTS)
lib/libu8io.dylib: $(LIBU8IO_OBJECTS) \
	lib/libu8.dylib lib/libu8fns.dylib
lib/libu8io.dll: $(LIBU8IO_OBJECTS) lib/libu8.dll lib/libu8fns.dll

lib/libu8stdio.a: $(LIBU8STDIO_OBJECTS)
lib/libu8stdio@suffix@.so: $(LIBU8STDIO_OBJECTS)
lib/libu8stdio.dylib: $(LIBU8STDIO_OBJECTS) lib/libu8.dylib
lib/libu8stdio.dll: $(LIBU8STDIO_OBJECTS) lib/libu8.dll

lib/libu8syslog.a: $(LIBU8SYSLOG_OBJECTS)
lib/libu8syslog@suffix@.so: $(LIBU8SYSLOG_OBJECTS)
lib/libu8syslog.dylib: $(LIBU8SYSLOG_OBJECTS) lib/libu8.dylib
lib/libu8syslog.dll: $(LIBU8SYSLOG_OBJECTS) lib/libu8.dll

docs: docs/doxygen.done

docs/doxygen.done: $(LIBU8_HEADERS)
	@$(DOXYGEN) docs/doxygen.cfg && touch docs/doxygen.done
	@echo DOXYGEN headers

clean: 
	@$(CLEAN) *.o *.a *@suffix@.so *.dylib *@suffix@.so.* 
	@$(CLEAN) lib/*.o lib/*.a lib/*@suffix@.so lib/*.dylib lib/*@suffix@.so.* 
	@echo "Cleaned up libraries"
	@$(CLEAN) docs/man/man3/* docs/html/* docs/rtf/* docs/latex/* docs/doxygen.done
	@echo "Cleaned up docs"
	@$(CLEAN) tests/getentity tests/latin1u8 tests/u8recode tests/u8xrecode
	@$(CLEAN) tests/echosrv
	@echo "Cleaned up static test executables"
	@$(CLEAN) tests/dynamic/getentity tests/dynamic/latin1u8
	@$(CLEAN) tests/dynamic/u8recode tests/dynamic/u8xrecode
	@$(CLEAN) tests/dynamic/echosrv
	@echo "Cleaned up dynamic test executables"
	@if test -d debian/libu8; then \
		rm -rf debian/libu8; echo "Cleaning up debian build"; \
	 fi

tidy: 
	$(CLEAN) *~ tests/*~ include/libu8/*~
distclean: clean
	$(CLEAN) makefile include/libu8/config.h include/libu8/revision.h
	$(CLEAN) config.log config.status config.cache

# Internationalization stuff

$(LOCALEDIR)/%/LC_MESSAGES/libu8msg.mo: etc/intl/%.gmo
	install $^ $@

etc/intl/libu8msg.pot: *.c tests/*.c
	xgettext -dlibu8 -oetc/intl/libu8msg.pot -k_ *.c tests/*.c
etc/intl/%.po: etc/intl/libu8msg.pot
	msgmerge -U $@ $<
etc/intl/%.gmo: etc/intl/%.po
	msgfmt $^ -o $@ 

install-i18n: $(LOCALEDIR)/fr/LC_MESSAGES/libu8msg.mo \
		$(LOCALEDIR)/es/LC_MESSAGES/libu8msg.mo \
		$(LOCALEDIR)/nl/LC_MESSAGES/libu8msg.mo
i18n: etc/intl/fr.gmo etc/intl/nl.gmo etc/intl/es.gmo

# Packaging targets

rpms: dist/rpms.done
debian deb debs: dist/debs.done

cleandist cleanrpms cleandeb rpmclean debclean:
	rm -rf dist/rpms.done dist/rpms.ready dist/debs.done dist/debs.ready
	rm -f dist/*.deb dist/*.tar dist/*.gz
	find dist -name "*.rpm" | xargs -r rm
	rm -rf staging/libu8*

# Creating staging areas from GIT

staging/libu8-@U8VERSION@: $(LIBU8_SOURCES) $(LIBU8_HEADERS)
	rm -rf staging/libu8-@U8VERSION@
	git archive --prefix=libu8-@U8VERSION@/ \
	            -o staging/libu8-@U8VERSION@.tar HEAD
	cd staging; tar -xf libu8-@U8VERSION@.tar; rm libu8-@U8VERSION@.tar
	if $(GITDESCRIBE) > /dev/null 2>&1; then			\
	    echo "#define LIBU8_REVISION \""`@GITDESCRIBE@`"\"" 	\
		> staging/libu8-@U8VERSION@/etc/revision.h;             \
	else echo "#define LIBU8_REVISION \"@U8VERSION@-exported\""	\
		> staging/libu8-@U8VERSION@/etc/revision.h;             \
	fi

staging/libu8_@U8VERSION@: $(LIBU8_SOURCES) $(LIBU8_HEADERS)
	rm -rf staging/libu8_@U8VERSION@
	git archive --prefix=libu8_@U8VERSION@/ \
	            -o staging/libu8_@U8VERSION@.tar HEAD
	cd staging; tar -xf libu8_@U8VERSION@.tar; rm libu8_@U8VERSION@.tar
	if $(GITDESCRIBE) > /dev/null 2>&1; then			\
	    echo "#define LIBU8_REVISION \""`@GITDESCRIBE@`"\"" 	\
		> staging/libu8-@U8VERSION@/etc/revision.h;             \
	else echo "#define LIBU8_REVISION \"@U8VERSION@-exported\""	\
		> staging/libu8-@U8VERSION@/etc/revision.h;             \
	fi

staging/libu8-@U8VERSION@.tar.gz: $(LIBU8_SOURCES) $(COMMON_HEADERS)
	make staging/libu8-@U8VERSION@
	tar -czvf $@ -C staging libu8-@U8VERSION@
staging/libu8_@U8VERSION@.orig.tar.gz: staging/libu8-@U8VERSION@
	cd staging; tar -czvf libu8_@U8VERSION@.orig.tar.gz libu8-@U8VERSION@

# RPM rules

dist/rpms.ready: staging/libu8-@U8VERSION@ \
	staging/libu8_@U8VERSION@.orig.tar.gz \
	staging/libu8-@U8VERSION@.tar.gz
	@@buildrpm@ $(RPMFLAGS)  			\
	   --define="_rpmdir $(RPMDIR)"			\
	   --define="_srcrpmdir $(RPMDIR)" 		\
	   --nodeps -ta 				\
	    staging/libu8-@U8VERSION@.tar.gz && 	\
	touch dist/rpms.ready
dist/rpms.done: dist/rpms.ready
	@if (test "x$(GPGID)" = "xnone"); then 				\
	    touch dist/rpms.done;					\
	elif (test "x$(GPGID)" = "x"); then 				\
	   echo "Enter passphrase for the RPM signing key:"; 		\
	   @rpm@ --addsign 						\
		--define="__gpg_sign_cmd $(RPMGPG)" 			\
		$(RPMDIR)/libu8-@U8VERSION@-*.src.rpm 			\
		$(RPMDIR)/*/libu8*-@U8VERSION@-*.rpm; 			\
	   else 							\
	     echo "Enter passphrase for '$(GPGID)':"; 			\
	     @rpm@ --addsign --define="_gpg_name $(GPGID)" 		\
		--define="__gpg_sign_cmd $(RPMGPG)" 			\
		$(RPMDIR)/libu8-@U8VERSION@*.src.rpm 			\
		$(RPMDIR)/*/libu8*-@U8VERSION@-*.rpm; fi && 		\
	@CREATEREPO@ -p -d $(RPMDIR) && 				\
	touch dist/rpms.done;
	@ls -l $(RPMDIR)/libu8-@U8VERSION@-*.src.rpm 			\
		$(RPMDIR)/*/libu8*-@U8VERSION@-*.rpm;

rpmupdate update-rpms freshrpms: cleanrpms
	rm -f dist/rpms.done dist/rpms.ready
	make dist/rpms.done RPMDIR=$(RPMDIR) GPGID=$(GPGID:-default)

dist/rpms.zip: dist/rpms.done
	@rm -f dist/rpms.zip
	@zip dist/rpms.zip \
		$(RPMDIR)/libu8*-@U8VERSION@-*.src.rpm \
		$(RPMDIR)/*/libu8-@U8VERSION@-*.rpm

# Rules for debian building

dist/debs.done: staging/libu8_@U8VERSION@ staging/libu8_@U8VERSION@.orig.tar.gz
	(cd staging/libu8_@U8VERSION@; dpkg-buildpackage -k $(GPGID:-default) -F -rfakeroot) && \
	(cd staging; mv libu8_@U8VERSION@*.deb libu8_@U8VERSION@*.dsc \
			libu8_@U8VERSION@*.gz libu8_@U8VERSION@*.changes \
			../dist) && \
	touch dist/debs.done; rm -rf staging/libu8_@U8VERSION@;
update-repo: dist/debs.done
	deb-s3 upload --bucket=repo.beingmeta.com \
		      --component=$(COMPONENT) \
		      --codename=$(CODENAME) \
		dist/libu8_@U8VERSION@*.deb

debian: dist/debs.done

# Installation targets

install: install-libs install-headers install-encodings \
	@INSTALLI18N@ @INSTALLDOCS@

install-libs: @install_static@ @install_shared@

install-headers: $(DESTDIR)@prefix@/include/libu8
	@echo Installing headers in $(DESTDIR)@prefix@/include/libu8
	@unset LD_LIBRARY_PATH; $(INSTALL) include/libu8/*.h $(DESTDIR)@prefix@/include/libu8
$(DESTDIR)@prefix@/include/libu8:
	$(INSTALL) -d $(DESTDIR)@prefix@/include/libu8

install-docs: docs/doxygen.done
	@echo "Writing man pages"
	@$(INSTALL) -d $(MANDIR)/man3
	@$(INSTALL) docs/man/man3/* $(MANDIR)/man3

install-static: $(LIBINSTALLDIR)/libu8.a \
		$(LIBINSTALLDIR)/libu8io.a \
		$(LIBINSTALLDIR)/libu8fns.a \
		$(LIBINSTALLDIR)/libu8data.a \
		$(LIBINSTALLDIR)/libu8stdio.a

install-so: $(LIBINSTALLDIR)/libu8@suffix@.so                  		\
	    $(LIBINSTALLDIR)/libu8@suffix@.so.@U8MAJOR@      		\
	    $(LIBINSTALLDIR)/libu8@suffix@.so.@U8VERSION@      		\
	    $(LIBINSTALLDIR)/libu8io@suffix@.so                		\
	    $(LIBINSTALLDIR)/libu8io@suffix@.so.@U8MAJOR@    		\
	    $(LIBINSTALLDIR)/libu8io@suffix@.so.@U8VERSION@    		\
	    $(LIBINSTALLDIR)/libu8fns@suffix@.so               		\
	    $(LIBINSTALLDIR)/libu8fns@suffix@.so.@U8MAJOR@   		\
	    $(LIBINSTALLDIR)/libu8fns@suffix@.so.@U8VERSION@   		\
	    $(LIBINSTALLDIR)/libu8data@suffix@.so              		\
	    $(LIBINSTALLDIR)/libu8data@suffix@.so.@U8MAJOR@  		\
	    $(LIBINSTALLDIR)/libu8data@suffix@.so.@U8VERSION@  		\
	    $(LIBINSTALLDIR)/libu8stdio@suffix@.so             		\
	    $(LIBINSTALLDIR)/libu8stdio@suffix@.so.@U8MAJOR@ 		\
	    $(LIBINSTALLDIR)/libu8stdio@suffix@.so.@U8VERSION@ 		\
	    $(LIBINSTALLDIR)/libu8syslog@suffix@.so            		\
	    $(LIBINSTALLDIR)/libu8syslog@suffix@.so.@U8MAJOR@           \
	    $(LIBINSTALLDIR)/libu8syslog@suffix@.so.@U8VERSION@

install-dylib: $(LIBINSTALLDIR)/libu8.dylib                  		\
               $(LIBINSTALLDIR)/libu8.@U8MAJOR@.dylib      		\
               $(LIBINSTALLDIR)/libu8.@U8VERSION@.dylib      		\
	       $(LIBINSTALLDIR)/libu8io.dylib                		\
	       $(LIBINSTALLDIR)/libu8io.@U8MAJOR@.dylib    		\
	       $(LIBINSTALLDIR)/libu8io.@U8VERSION@.dylib    		\
	       $(LIBINSTALLDIR)/libu8fns.dylib               		\
	       $(LIBINSTALLDIR)/libu8fns.@U8MAJOR@.dylib   		\
	       $(LIBINSTALLDIR)/libu8fns.@U8VERSION@.dylib   		\
	       $(LIBINSTALLDIR)/libu8data.dylib              		\
	       $(LIBINSTALLDIR)/libu8data.@U8MAJOR@.dylib  		\
	       $(LIBINSTALLDIR)/libu8data.@U8VERSION@.dylib  		\
	       $(LIBINSTALLDIR)/libu8stdio.dylib             		\
	       $(LIBINSTALLDIR)/libu8stdio.@U8MAJOR@.dylib 		\
	       $(LIBINSTALLDIR)/libu8stdio.@U8VERSION@.dylib 		\
	       $(LIBINSTALLDIR)/libu8syslog.dylib            		\
	       $(LIBINSTALLDIR)/libu8syslog.@U8MAJOR@.dylib		\
	       $(LIBINSTALLDIR)/libu8syslog.@U8VERSION@.dylib

install-dll: libu8.dll libu8io.dll \
	    libu8fns.dll libu8data.dll \
	    libu8stdio.dll \
	    $(LIBINSTALLDIR)
	$(INSTALL) -D $^ $(LIBINSTALLDIR)

ENCODINGS=\
	encodings/ISO88591 \
	encodings/ISO88593 \
	encodings/ISO88594 \
	encodings/ISO88595 \
	encodings/ISO88597 \
	encodings/ISO885913 \
	encodings/ISO885915 \
	encodings/ISO885916 \
	encodings/ISO88598 \
	encodings/ISO88599 \
	encodings/ISO885910 \
	encodings/ISO885911 \
	encodings/ISO885914 \
	encodings/KOI8 \
	encodings/KOI8R \
	encodings/MACINTOSH \
	encodings/ISO_6937 \
	encodings/GBK \
	encodings/SHIFT_JIS \
	encodings/CP1125 \
	encodings/CP1251 \
	encodings/CP1252 \
	encodings/CP1253 \
	encodings/CP1254 \
	encodings/CP1255 \
	encodings/CP1256 \
	encodings/CP1257 \
	encodings/CP1258 \
	encodings/GB2312 \
	encodings/ISO88592 \
	encodings/BIG5 \
	encodings/EUCJP \
	encodings/EUCKR \
	encodings/EUCTW \
	encodings/GREEK7 \
	encodings/SHIFT_JISX0213 \
	encodings/MACCYRILLIC \
	encodings/MACCENTRALEUROPE \
	encodings/TSCII \
	encodings/VISCII
CP1125_ALIASES=MSEE WINDOWS1250
CP1250_ALIASES=MSEE WINDOWS1250
CP1251_ALIASES=MSCYRL WINDOWS1251
CP1252_ALIASES=MS1252 WINDOWS1252 MSANSI
CP1253_ALIASES=MS1252 WINDOWS1253 MSGREEK
CP1254_ALIASES=MS1254 WINDOWS1254 MSTURK
CP1255_ALIASES=MS1255 WINDOWS1255 MSHEBR
CP1256_ALIASES=MS1256 WINDOWS1256 MSARAB
CP1257_ALIASES=MS1257 WINDOWS1257 WINBALTRIM
CP1258_ALIASES=MS1258 WINDOWS1258
ISO88591_ALIASES=CP819 CSISOLATIN IBM819 ISOIR100 L1 LATIN1
ISO88592_ALIASES=CSISOLATIN2 ISOIR101 L2 LATIN2
ISO88593_ALIASES=CSISOLATIN3 ISOIR109 L3 LATIN3
ISO88594_ALIASES=CSISOLATIN4 ISOIR110 L4 LATIN4
ISO88595_ALIASES=CSISOLATINCYRILLIC CYRILLIC ISOIR144 L4 LATIN4
ISO88596_ALIASES=ARABIC ASMO708 CSISOLATINARABIC ECMA114 ISOIR127
ISO88597_ALIASES=CSISOLATINGREEK ECMA118 ELOT928 GREEK GREEK8 ISOIR126
ISO88598_ALIASES=CSISOLATINHEBREW HEBREW ISOIR138
ISO88599_ALIASES=CSISOLATIN5 ISOIR148 L5 LATIN5
EUCJP_ALIASES=CSEUCJP UJIS XEUCJP
EUCKR_ALIASES=CSEUCKR
EUCTW_ALIASES=CNS11643
#KOI8_ALIASES=
KOI8R_ALIASES=CSKOI8R
SHIFTJIS_ALIASES=CSSHIFTJIS MSKANJI SJIS SJIS
#SHIFTJISX2013_ALIASES=
GB2312_ALIASES=CHINESE CSGB2312 CSISO58GB231280,ISOIR58
GBK_ALIASES=CP936 MS936 WINDOWS936
#GREEK7_ALIASES=
BIG5_ALIASES=BIGFIVE CN-BIG5 CSBIG5
MACINTOSH_ALIASES=MACROMAN CSMACINTOSH MAC

install-encodings: $(DESTDIR)@prefix@/share/libu8/encodings
	@echo Installing encodings in $(ENCDIR)
	@unset LD_LIBRARY_PATH; $(INSTALL) $(ENCODINGS) $(ENCDIR)
	@unset LD_LIBRARY_PATH; \
        for x in $(CP1125_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1125 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1250_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1250 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1251_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1251 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1252_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1252 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1253_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1253 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1254_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1254 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1255_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1255 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1256_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1256 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1257_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1257 $(ENCDIR)/$$x; fi; done; \
	for x in $(CP1258_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf CP1258 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88591_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88591 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88592_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88592 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88593_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88593 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88594_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88594 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88595_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88595 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88596_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88596 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88597_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88597 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88598_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88598 $(ENCDIR)/$$x; fi; done; \
	for x in $(ISO88599_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf ISO88599 $(ENCDIR)/$$x; fi; done; \
	for x in $(EUCJP_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf EUCJP $(ENCDIR)/$$x; fi; done; \
	for x in $(EUCKR_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf EUCKR $(ENCDIR)/$$x; fi; done; \
	for x in $(EUCTW_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf EUCTW $(ENCDIR)/$$x; fi; done; \
	for x in $(KOI8R_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf KOI8R $(ENCDIR)/$$x; fi; done; \
	for x in $(SHIFTJIS_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf SHIFTJIS $(ENCDIR)/$$x; fi; done; \
	for x in $(GB2312_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf GB2312 $(ENCDIR)/$$x; fi; done; \
	for x in $(GBK_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf GBK $(ENCDIR)/$$x; fi; done; \
	for x in $(BIG5_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf BIG5 $(ENCDIR)/$$x; fi; done; \
	for x in $(MACINTOSH_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf MACINTOSH $(ENCDIR)/$$x; fi; done; \
	for x in $(MACCYRILLIC_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf MACCYRILLIC $(ENCDIR)/$$x; fi; done; \
	for x in $(MACCENTRALEUROPE_ALIASES); do \
		if ! test -h $(ENCDIR)/$$x; \
		then @SUDO@ln -sf MACCENTRALEUROPE $(ENCDIR)/$$x; fi; done;

$(DESTDIR)@prefix@/share/libu8/encodings:
	$(INSTALL) -d $(DESTDIR)@prefix@/share/libu8/encodings

# buildmode dependencies

$(LIBU8CORE_OBJECTS) $(LIBU8FNS_OBJECTS) $(LIBU8DATA_OBJECTS): buildmode
$(LIBU8IO_OBJECTS) $(LIBU8STDIO_OBJECTS) $(LIBU8SYSLOG_OBJECTS): buildmode

# dependencies

streamio.o printf.o logging.o exceptions.o chardata.o stringfns.o convert.o libu8.o libu8io.o: \
  $(COMMON_HEADERS) include/libu8/revision.h
ctype.o: $(COMMON_HEADERS) entities.h
cityhash.o: $(COMMON_HEADERS) include/libu8/cityhash.h
timefns.o: $(COMMON_HEADERS) include/libu8/u8timefns.h
rusage.o: $(COMMON_HEADERS) include/libu8/u8rusage.h
printf.o: $(COMMON_HEADERS) include/libu8/libu8io.h include/libu8/u8printf.h
xfiles.o: $(COMMON_HEADERS) include/libu8/libu8io.h include/libu8/xfiles.h
netfns.o: $(COMMON_HEADERS) include/libu8/libu8io.h include/libu8/u8netfns.h
srvfns.o: $(COMMON_HEADERS) \
	include/libu8/libu8io.h include/libu8/u8netfns.h \
	include/libu8/u8srvfns.h

